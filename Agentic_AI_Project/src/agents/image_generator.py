import os
import uuid
import requests
from io import BytesIO
from PIL import Image


class ImageGenerator:
    def __init__(self):
        # Hugging Face API key (free tier works)
        self.hf_key = os.getenv("HF_API_KEY") or "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"

        if not self.hf_key:
            raise ValueError("No Hugging Face API key found! Set HF_API_KEY")

        self.hf_url = "https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5"

        # Stability AI fallback (optional)
        self.stability_key = os.getenv("STABILITY_API_KEY") or "hAvNk2DH1Fwq2AjmY8EHVu1m0jkfb0xt3kJUVVHgQlPRsUTH"

    def generate(self, prompt: str) -> str:
        """
        Generate an image using Hugging Face Inference API (free),
        fallback to Stability AI API if available.
        """
        filename = f"slide_image_{uuid.uuid4().hex[:6]}.png"

        # --- Try Hugging Face ---
        headers = {"Authorization": f"Bearer {self.hf_key}"}
        response = requests.post(self.hf_url, headers=headers, json={"inputs": prompt})

        if response.status_code == 200:
            image = Image.open(BytesIO(response.content))
            image.save(filename)
            print("[INFO] Image generated by Hugging Face ✅")
            return filename
        else:
            print("[WARN] Hugging Face failed:", response.text)

        # --- Fallback: Stability AI ---
        if self.stability_key:
            stability_url = "https://api.stability.ai/v1/generation/stable-diffusion-v1-5/text-to-image"
            headers = {
                "Authorization": f"Bearer {self.stability_key}",
                "Content-Type": "application/json"
            }
            payload = {
                "text_prompts": [{"text": prompt}],
                "cfg_scale": 7,
                "clip_guidance_preset": "NONE",
                "samples": 1,
                "steps": 30,
            }
            resp = requests.post(stability_url, headers=headers, json=payload)

            if resp.status_code == 200:
                data = resp.json()
                b64 = data["artifacts"][0]["base64"]
                image = Image.open(BytesIO(base64.b64decode(b64)))
                image.save(filename)
                print("[INFO] Image generated by Stability AI ✅")
                return filename
            else:
                print("[ERROR] Stability AI failed:", resp.text)

        raise RuntimeError("All image generation backends failed")


if __name__ == "__main__":
    generator = ImageGenerator()
    img_path = generator.generate("A futuristic cricket stadium full of cheering fans")
    print("Image saved at:", img_path)
